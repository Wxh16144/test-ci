name: Commands Action

on: issue_comment

permissions: write-all

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  check_comments:
    name: Check comments for /cherry_pick
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request }}
    outputs: 
      command-name: ${{ steps.command.outputs.command-name }}
      command-arguments: ${{ steps.command.outputs.command-arguments }}
    steps:
      - name: Check for Command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          command: cherry_pick
          reaction: "true"
          reaction-type: "eyes"
          allow-edits: "false"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo Command
        run: echo "The command was '${{ steps.command.outputs.command-name }}' with arguments '${{ steps.command.outputs.command-arguments }}'"

  cherry_pick_command:
    name: Cherry Pick Command
    runs-on: ubuntu-latest
    needs: check_comments
    if: ${{ needs.check_comments.outputs.command-name == 'cherry_pick' && needs.check_comments.outputs.command-arguments != '' }}
    steps:
      - name: get PR details
        id: pr_info
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })

            // set the output variable
            core.setOutput("head_name", response.data.head.ref ?? response.data.head.sha)
            core.setOutput("base_name", response.data.base.ref ?? response.data.base.sha)
       
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.head_name }}

      - name: branch-name
        id: branch-name
        run: |
         echo "name=auto-cherry-pick/${{ steps.pr_info.outputs.head_name }}" >> $GITHUB_OUTPUT

      - name: Rename branch
        run: |
          git push origin HEAD:${{ steps.pr_info.outputs.branch-name.name }}

      - name: create pull request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Cannot be default!!!
          title: "chore: cherry pick #${{ github.event.issue.number }} to ${{ needs.check_comments.outputs.command-arguments }}"
          # 当前 pr 的分支名称
          branch: ${{ steps.pr_info.outputs.branch-name.name }}
          base: ${{ needs.check_comments.outputs.command-arguments }}
